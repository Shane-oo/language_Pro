<<<<<<< HEAD
import typing as t
=======
>>>>>>> main
from ast import literal_eval
from itertools import chain
from itertools import islice

from . import nodes
<<<<<<< HEAD
from .compiler import CodeGenerator
from .compiler import Frame
=======
from ._compat import text_type
from .compiler import CodeGenerator
>>>>>>> main
from .compiler import has_safe_repr
from .environment import Environment
from .environment import Template


<<<<<<< HEAD
def native_concat(values: t.Iterable[t.Any]) -> t.Optional[t.Any]:
=======
def native_concat(nodes):
>>>>>>> main
    """Return a native Python type from the list of compiled nodes. If
    the result is a single node, its value is returned. Otherwise, the
    nodes are concatenated as strings. If the result can be parsed with
    :func:`ast.literal_eval`, the parsed value is returned. Otherwise,
    the string is returned.

<<<<<<< HEAD
    :param values: Iterable of outputs to concatenate.
    """
    head = list(islice(values, 2))
=======
    :param nodes: Iterable of nodes to concatenate.
    """
    head = list(islice(nodes, 2))
>>>>>>> main

    if not head:
        return None

    if len(head) == 1:
        raw = head[0]
<<<<<<< HEAD
        if not isinstance(raw, str):
            return raw
    else:
        raw = "".join([str(v) for v in chain(head, values)])
=======
    else:
        raw = u"".join([text_type(v) for v in chain(head, nodes)])
>>>>>>> main

    try:
        return literal_eval(raw)
    except (ValueError, SyntaxError, MemoryError):
        return raw


class NativeCodeGenerator(CodeGenerator):
    """A code generator which renders Python types by not adding
<<<<<<< HEAD
    ``str()`` around output nodes.
    """

    @staticmethod
    def _default_finalize(value: t.Any) -> t.Any:
        return value

    def _output_const_repr(self, group: t.Iterable[t.Any]) -> str:
        return repr("".join([str(v) for v in group]))

    def _output_child_to_const(
        self, node: nodes.Expr, frame: Frame, finalize: CodeGenerator._FinalizeInfo
    ) -> t.Any:
=======
    ``to_string()`` around output nodes.
    """

    @staticmethod
    def _default_finalize(value):
        return value

    def _output_const_repr(self, group):
        return repr(u"".join([text_type(v) for v in group]))

    def _output_child_to_const(self, node, frame, finalize):
>>>>>>> main
        const = node.as_const(frame.eval_ctx)

        if not has_safe_repr(const):
            raise nodes.Impossible()

        if isinstance(node, nodes.TemplateData):
            return const

<<<<<<< HEAD
        return finalize.const(const)  # type: ignore

    def _output_child_pre(
        self, node: nodes.Expr, frame: Frame, finalize: CodeGenerator._FinalizeInfo
    ) -> None:
        if finalize.src is not None:
            self.write(finalize.src)

    def _output_child_post(
        self, node: nodes.Expr, frame: Frame, finalize: CodeGenerator._FinalizeInfo
    ) -> None:
=======
        return finalize.const(const)

    def _output_child_pre(self, node, frame, finalize):
        if finalize.src is not None:
            self.write(finalize.src)

    def _output_child_post(self, node, frame, finalize):
>>>>>>> main
        if finalize.src is not None:
            self.write(")")


class NativeEnvironment(Environment):
    """An environment that renders templates to native Python types."""

    code_generator_class = NativeCodeGenerator


class NativeTemplate(Template):
    environment_class = NativeEnvironment

<<<<<<< HEAD
    def render(self, *args: t.Any, **kwargs: t.Any) -> t.Any:
=======
    def render(self, *args, **kwargs):
>>>>>>> main
        """Render the template to produce a native Python type. If the
        result is a single node, its value is returned. Otherwise, the
        nodes are concatenated as strings. If the result can be parsed
        with :func:`ast.literal_eval`, the parsed value is returned.
        Otherwise, the string is returned.
        """
<<<<<<< HEAD
        ctx = self.new_context(dict(*args, **kwargs))

        try:
            return native_concat(self.root_render_func(ctx))  # type: ignore
        except Exception:
            return self.environment.handle_exception()

    async def render_async(self, *args: t.Any, **kwargs: t.Any) -> t.Any:
        if not self.environment.is_async:
            raise RuntimeError(
                "The environment was not created with async mode enabled."
            )

        ctx = self.new_context(dict(*args, **kwargs))

        try:
            return native_concat(
                [n async for n in self.root_render_func(ctx)]  # type: ignore
            )
=======
        vars = dict(*args, **kwargs)

        try:
            return native_concat(self.root_render_func(self.new_context(vars)))
>>>>>>> main
        except Exception:
            return self.environment.handle_exception()


NativeEnvironment.template_class = NativeTemplate
